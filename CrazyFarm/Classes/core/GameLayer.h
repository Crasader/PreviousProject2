#ifndef __GAME_LAYER_H__
#define __GAME_LAYER_H__
#include "cocos2d.h"
#include "fish/FishManage.h"
#include "bullet/BulletManage.h"
#include "turret/PlayerTurret.h"
#include "net/Net.h"
#include "domain/room/RoomManager.h"
#include "domain/magnate/MagnateManager.h"
#include "server/MsgObserver.h"
#include "server/Msg/MSGstdafx.h"
USING_NS_CC;
enum TouchType
{
	TouchInNormal,
	TouchInLock,
	TouchInBoom,
	TouchInAutoShoot,
	TouchInLight
};

class GameLayer: public cocos2d::Layer ,public MsgObserver{
public:
	virtual bool init();
	CREATE_FUNC(GameLayer);
	void loadNewMonent(int monmentType);
	void RefreShmyPlayerTurret();
	
	void addReward(int itemid, int num);



	Vector<PlayerTurret*> GetOtherTurret(){ return otherTurrets; }

	void createNet(Bullet *bullet);//打开渔网
	PlayerTurret* GetMyTurret(){ return myTurret; }
	//抽奖奖励动画有烟花
	void onGetReward(int itemid, int num);
	//某条鱼掉落道具或钻石
	void onGetRewardByfish(PlayerTurret*turrent,Fish*fish,int itemid,int num);
	void onExitEX();
private:
	void createTurret();//按照类型生成炮塔
	void addTouchEvent();
	bool onTouchBegan(Touch *touch, Event  *event);
	void onTouchMoved(Touch *touch, Event  *event);
	void onTouchEnded(Touch *touch, Event  *event);
	//发射子弹	

	void rotateTurret(float degree, PlayerTurret* turret);//旋转炮塔

	void showYourChairno();

	void AiUpdata(float dt);
	
	void onEnter();
	virtual void onEnterTransitionDidFinish();
	//Updata
	void collisionUpdate(float dt);
	void update(float dt);
	void shootUpdata(float dt);
	//间隔10S同步一次信息
public:
	void UpdateUserinfo(float dt);

	//激光
public:
	void beginLight();
	void endLight();
	void LightUpdata(float dt);
	bool lightTouchEvent(Touch *touch, Event  *event);
 //锁定
public:
	void beginLock();
	void endLock();
private:
	void LockUpdata(float dt);
	bool lockTouchEvent(Touch *touch, Event  *event);
//核弹
public:
	void beginSkillBoom();
	void endSkillBoom(); 
	void onBoomCatchFish(Point pos,PlayerTurret*turrent);
	void doBoom(Point pos, PlayerTurret*turrent,bool isrobot);
private:
	bool boomTouchEvent(Touch *touch, Event  *event);
	
//自动开炮
public:
	void beginAutoShoot();
	void endAutoShoot();
private:
	Point autoShootPos;
	bool AutoShootTouchEvent(Touch *touch, Event  *event);
////////////冻结
public:
	void useFreeze(PlayerTurret*turret);
	void onFreezeEnd(PlayerTurret*turret);
////鱼潮来临
	void onClearFish();
	void onClearFishUpdata(float dt);
	void onClearFishFinish();
private:

	int m_index = -1; //客户端显示位置
	int m_curIndex;//实际位置


	void initFishAndBulletData();


	//点击炮
	bool onTouTurret(Point pos);
	void removePlayerInfo();
	void calculateFreeChair();

	//utill
	static bool sortFish(const Fish * m1, const Fish * m2);
	

	PlayerTurret* myTurret = NULL;

	Vector<PlayerTurret*> otherTurrets;
	std::vector<RoomPlayer> players;
	
	EventListenerTouchOneByOne* touchListener;
	bool isShoot = true;
//点击事件
	void changeTouchFunByTouchType(TouchType type);
	TouchType m_touchType;
	TouchType m_lasttouchType;


	std::list<TouchType> _touchtypes;
	Sprite* game_bg;

	CC_SYNTHESIZE(Node*, createFishAcNode, CreateFishAcNode);
	CC_SYNTHESIZE(bool, isShowYourChairno, IsShowYourChairno);
	Point touchpos;
	bool istouched = false;
	float shootTemp = 0;


	std::map<int, Sprite*> TxtWaitingTurrent;

	public:
	void onTurretLeave(PlayerTurret*turret);
///////强联网相关
public:
	virtual void handle_event(const char* msgId, const char* msgBody);
private:
//消息
	static bool sortMsg(const Msg_Base * m1, const Msg_Base * m2);

	

	void onSomeoneLeave(Msg_onLeave* msg);  //玩家离开
	void onSomeoneComing(Msg_onAdd* msg);  //玩家进入
	void onClientInit(Msg_onInit* msg);   //init
	void onFishesMsg(Msg_OnFishes*msg);  //鱼群信息
	void onConError(Msg_ConError*msg);  //断开连接
	void onUpdateTurrent(Msg_OnUpdateTurrent*msg); //升级炮塔
	void onUpdateLevel(Msg_OnExpUpdate*msg); //升级
	void onGetBounsPool(Msg_OnGetBounsPool*msg); //获取奖金池
	void onUseSkill(Msg_UseSkill* msg); //使用技能
	void onLuckDraw(Msg_LuckDraw* msg); //转盘抽奖
	void onBankrupt(Msg_OnBankrupt* msg); //破产信息
	void onbankruptRebirth(Msg_OnBankruptRebirth* msg); //破产领取
	void onMagnate(Msg_OnMagnate*msg); //赠送
	void onPayresulet(Msg_Payresult*msg); //支付结果
	void onBossDead(Msg_OnBossDead*msg); //BOSS鱼死亡
	void onMarquee(Msg_OnMarquee*msg);  //跑马灯任务完成信息
	void onBeginMarried(Msg_OnBeginMarried*msg);  //美人鱼任务开始
	void onCathchMarriedFish(Msg_OnCatchMarriedFish*msg);//打到任务鱼
	void onMarriedTaskSuccess(Msg_OnMarriedSuccess*msg); //美人鱼任务成功
	void ToPayShopCallBack(Ref*psend);
	void exitCallback(Ref*psend);
	void MsgUpdata(float dt);
	std::list<Msg_Base*> Msgs;
	//初始时间
	unsigned long init_creat_time;
	//渔区快进
	void FFOneTimeToFishes(float FFTime);

	void UpdateCreateFishByServer(float dt);


	int _fishGroupType;//0 鱼群 1鱼潮

	int _fishGroupMonentType;
	//
	bool isInitData = false;


};
#endif